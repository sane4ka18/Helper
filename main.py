#!/usr/bin/env python3
import os
import io
import logging
import asyncio
from typing import Dict, List, Tuple, Set
from datetime import datetime, date

import httpx
from dotenv import load_dotenv

import base64
import pdfplumber
import sqlite3

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from openai import OpenAI

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
ADMIN_IDS = {1647999523}
DONATION_ALERTS_LINK = os.getenv("DONATION_ALERTS_LINK", "https://www.donationalerts.com/r/your_username")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("TELEGRAM_TOKEN or OPENROUTER_API_KEY not found in .env file")

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
    http_client=httpx.Client(timeout=30.0)
)

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# SQLite connection (use a persistent path on Railway, e.g., via volume mount like '/data/bot.db')
DB_PATH = '/data/bot.db'  # Ensure Railway has a volume mounted at /data
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
c = conn.cursor()

# Create tables if not exist
c.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY,
              first_seen TEXT,
              last_seen TEXT,
              message_count INTEGER DEFAULT 0,
              photo_count INTEGER DEFAULT 0,
              document_count INTEGER DEFAULT 0)''')
c.execute('''CREATE TABLE IF NOT EXISTS user_requests
             (user_id INTEGER,
              date TEXT,
              count INTEGER DEFAULT 0,
              PRIMARY KEY (user_id, date))''')
c.execute('''CREATE TABLE IF NOT EXISTS user_memory
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              user_id INTEGER,
              question TEXT,
              answer TEXT,
              timestamp TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS premium_users
             (user_id INTEGER PRIMARY KEY)''')
conn.commit()

user_state: Dict[int, str] = {}
user_memory: Dict[int, List[Tuple[str, str]]] = {}
user_stats: Dict[int, Dict] = {}
user_requests: Dict[int, Dict] = {}
premium_users: Set[int] = set()
MEMORY_LIMIT = 10
DEFAULT_REQUEST_LIMIT = 50
PREMIUM_REQUEST_LIMIT = 200

admin_broadcast_state: Dict[int, str] = {}

main_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="btn_solve_text"),
         InlineKeyboardButton(text="üì∏ –†–µ—à–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="btn_solve_photo")],
        [InlineKeyboardButton(text="üìö –ö–æ–Ω—Å–ø–µ–∫—Ç", callback_data="btn_consp–µ–∫—Ç")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="btn_clear_memory"),
         InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="btn_profile")]
    ]
)

profile_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_back_main")]
    ]
)

cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="btn_cancel")]
    ]
)

admin_main_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_user_memory")],
        [InlineKeyboardButton(text="üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_activity")],
        [InlineKeyboardButton(text="üíé –î–æ–±–∞–≤–∏—Ç—å Premium", callback_data="admin_add_premium")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å Premium", callback_data="admin_remove_premium")],
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø", callback_data="admin_backup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_main")]
    ]
)

admin_broadcast_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_cancel_broadcast")]
    ]
)

admin_back_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
)

def load_data():
    global user_stats, user_requests, user_memory, premium_users
    user_stats = {}
    c.execute("SELECT * FROM users")
    for row in c.fetchall():
        user_id, first_seen, last_seen, message_count, photo_count, document_count = row
        user_stats[user_id] = {
            "first_seen": first_seen,
            "last_seen": last_seen,
            "message_count": message_count,
            "photo_count": photo_count,
            "document_count": document_count
        }
    user_requests = {}
    c.execute("SELECT * FROM user_requests")
    for row in c.fetchall():
        user_id, date_str, count = row
        user_requests[user_id] = {"date": date_str, "count": count}
    user_memory = {}
    c.execute("SELECT user_id, question, answer FROM user_memory ORDER BY timestamp ASC")
    for row in c.fetchall():
        user_id, question, answer = row
        user_memory.setdefault(user_id, []).append((question, answer))
    for uid in list(user_memory.keys()):
        mem = user_memory[uid]
        if len(mem) > MEMORY_LIMIT:
            excess = len(mem) - MEMORY_LIMIT
            c.execute("SELECT id FROM user_memory WHERE user_id=? ORDER BY timestamp ASC LIMIT ?", (uid, excess))
            ids_to_del = [r[0] for r in c.fetchall()]
            for del_id in ids_to_del:
                c.execute("DELETE FROM user_memory WHERE id=?", (del_id,))
            conn.commit()
            user_memory[uid] = mem[-MEMORY_LIMIT:]
    c.execute("SELECT user_id FROM premium_users")
    premium_users = {row[0] for row in c.fetchall()}

def update_user_stats(user_id: int, message_type: str = "text"):
    now = datetime.now().isoformat()
    if user_id not in user_stats:
        user_stats[user_id] = {
            "first_seen": now,
            "last_seen": now,
            "message_count": 0,
            "photo_count": 0,
            "document_count": 0
        }
        c.execute("INSERT INTO users (user_id, first_seen, last_seen, message_count, photo_count, document_count) VALUES (?, ?, ?, 0, 0, 0)",
                  (user_id, now, now))
        conn.commit()
    user_stats[user_id]["last_seen"] = now
    if message_type == "text":
        user_stats[user_id]["message_count"] += 1
    elif message_type == "photo":
        user_stats[user_id]["photo_count"] += 1
    elif message_type == "document":
        user_stats[user_id]["document_count"] += 1
    c.execute("""UPDATE users SET last_seen=?, message_count=?, photo_count=?, document_count=?
                 WHERE user_id=?""",
              (now, user_stats[user_id]["message_count"], user_stats[user_id]["photo_count"],
               user_stats[user_id]["document_count"], user_id))
    conn.commit()

def save_memory(user_id: int, question: str, answer: str):
    mem = user_memory.setdefault(user_id, [])
    timestamp = datetime.now().isoformat()
    mem.append((question, answer))
    c.execute("INSERT INTO user_memory (user_id, question, answer, timestamp) VALUES (?, ?, ?, ?)",
              (user_id, question, answer, timestamp))
    conn.commit()
    if len(mem) > MEMORY_LIMIT:
        c.execute("SELECT id FROM user_memory WHERE user_id=? ORDER BY timestamp ASC LIMIT 1", (user_id,))
        del_id = c.fetchone()
        if del_id:
            c.execute("DELETE FROM user_memory WHERE id=?", (del_id[0],))
            conn.commit()
        mem.pop(0)

def build_memory_text(user_id: int):
    mem = user_memory.get(user_id, [])
    if not mem:
        return "üì≠ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞."
    lines = ["üïë <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"]
    for i, (q, a) in enumerate(reversed(mem), 1):
        lines.append(f"<b>{i}.</b> –í–æ–ø—Ä–æ—Å: {q[:120]}")
        lines.append(f"<b>–û—Ç–≤–µ—Ç:</b> {a[:300]}\n")
    return "\n".join(lines)

def get_request_limit(user_id: int):
    if user_id in ADMIN_IDS:
        return float('inf')
    elif user_id in premium_users:
        return PREMIUM_REQUEST_LIMIT
    else:
        return DEFAULT_REQUEST_LIMIT

def update_request_count(user_id: int):
    today = date.today().isoformat()
    if user_id not in user_requests or user_requests[user_id]["date"] != today:
        user_requests[user_id] = {"count": 0, "date": today}
        c.execute("INSERT OR REPLACE INTO user_requests (user_id, date, count) VALUES (?, ?, 0)", (user_id, today))
        conn.commit()
    user_requests[user_id]["count"] += 1
    c.execute("UPDATE user_requests SET count=? WHERE user_id=? AND date=?", 
              (user_requests[user_id]["count"], user_id, today))
    conn.commit()

def get_requests_left(user_id: int):
    today = date.today().isoformat()
    if user_id not in user_requests or user_requests[user_id]["date"] != today:
        user_requests[user_id] = {"count": 0, "date": today}
        c.execute("INSERT OR REPLACE INTO user_requests (user_id, date, count) VALUES (?, ?, 0)", (user_id, today))
        conn.commit()
    count = user_requests[user_id]["count"]
    limit = get_request_limit(user_id)
    return limit - count if limit != float('inf') else float('inf')

async def ocr_image_from_bytes(img_bytes: bytes):
    try:
        base64_image = base64.b64encode(img_bytes).decode('utf-8')
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(None, lambda: client.chat.completions.create(
            model="openai/gpt-4o-mini",
            extra_headers={
                "HTTP-Referer": "https://your-site-url.com",
                "X-Title": "Homework Helper Bot"
            },
            extra_body={},
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Extract all text from this image accurately, including any math formulas. Return only the extracted text."},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000
        ))
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OCR error: {e}")
        return ""

async def call_openai_with_prompt(user_id: int, prompt: str, is_math: bool = False):
    system_prompt = (
        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –≤–∫–ª—é—á–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, —Ñ–∏–∑–∏–∫—É, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏ –¥—Ä—É–≥–∏–µ. –†–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ä–∞—Ç–∫–æ –∏ —á–µ—Ç–∫–æ. "
        "–î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã: ‚àö –¥–ª—è –∫–æ—Ä–Ω—è, ^ –¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏, √ó –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è, √∑ –¥–ª—è –¥–µ–ª–µ–Ω–∏—è, () –¥–ª—è —Å–∫–æ–±–æ–∫, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∫–æ–±–æ–∫. "
        "–ë–µ–∑ LaTeX –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤. "
        "–î–ª—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –¥–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. "
        "–£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ. "
        "–î–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç, –º–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å '–æ–±—ä—è—Å–Ω–∏' –∏–ª–∏ '–ø–æ—è—Å–Ω–∏', –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. "
        "–ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. "
        "–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. "
        "–ù–µ –∑–∞–±—ã–≤–∞–π, —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–µ, –≥–¥–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ —Ç.–¥. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ - —Ç—ã –Ω–µ –Ω–∞ —Å–∞–π—Ç–µ. –ò –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π **—Ç–µ–∫—Å—Ç** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ - –æ–Ω–∏ –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–π <b>—Ç–µ–∫—Å—Ç</b>"
    )
    try:
        loop = asyncio.get_event_loop()
        messages = [{"role": "system", "content": system_prompt}]
        if user_id in user_memory:
            for question, answer in user_memory[user_id][-3:]:
                messages.append({"role": "user", "content": question})
                messages.append({"role": "assistant", "content": answer})
        messages.append({"role": "user", "content": prompt})
        completion = await loop.run_in_executor(None, lambda: client.chat.completions.create(
            model="deepseek/deepseek-v3.2-exp",
            extra_headers={
                "HTTP-Referer": "https://your-site-url.com",
                "X-Title": "Homework Helper Bot"
            },
            extra_body={},
            messages=messages,
            temperature=0.1,
            max_tokens=1500
        ))
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        raise

def get_user_stats_text():
    total_users = len(user_stats)
    total_messages = sum(stats["message_count"] for stats in user_stats.values())
    total_photos = sum(stats["photo_count"] for stats in user_stats.values())
    total_documents = sum(stats["document_count"] for stats in user_stats.values())
    text = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
        f"üí¨ –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}",
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {total_photos}",
        f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_documents}",
        "",
        "<b>–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"
    ]
    user_activity = []
    for user_id, stats in user_stats.items():
        total_activity = stats["message_count"] + stats["photo_count"] + stats["document_count"]
        user_activity.append((user_id, total_activity, stats))
    user_activity.sort(key=lambda x: x[1], reverse=True)
    for i, (user_id, activity, stats) in enumerate(user_activity[:10], 1):
        first_seen = datetime.fromisoformat(stats["first_seen"]).strftime("%d.%m.%Y %H:%M")
        text.append(
            f"{i}. ID: {user_id} | –°–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']} | –§–æ—Ç–æ: {stats['photo_count']} | –î–æ–∫—É–º–µ–Ω—Ç—ã: {stats['document_count']} | –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen}")
    return "\n".join(text)

def get_users_list():
    if not user_stats:
        return "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç</b>"
    text = ["üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"]
    for i, (user_id, stats) in enumerate(user_stats.items(), 1):
        first_seen = datetime.fromisoformat(stats["first_seen"]).strftime("%d.%m.%Y")
        last_seen = datetime.fromisoformat(stats["last_seen"]).strftime("%d.%m.%Y %H:%M")
        status = "Admin" if user_id in ADMIN_IDS else ("Premium" if user_id in premium_users else "–û–±—ã—á–Ω—ã–π")
        text.append(
            f"{i}. ID: {user_id} | {status} | –°–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']} | –§–æ—Ç–æ: {stats['photo_count']} | –î–æ–∫—É–º–µ–Ω—Ç—ã: {stats['document_count']}")
        text.append(f"   –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen} | –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_seen}\n")
    return "\n".join(text)

async def send_broadcast_message(message_text: str):
    success_count = 0
    fail_count = 0
    users = list(user_stats.keys())
    for user_id in users:
        try:
            await bot.send_message(user_id, message_text)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
            fail_count += 1
    return f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}"

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_state.pop(user_id, None)
    update_user_stats(user_id, "text")
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–∑—à–∫–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª (TXT/PDF) –∑–∞–¥–∞—á–∏, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ. –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É - /help.",
        reply_markup=main_kb
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    update_user_stats(user_id, "text")
    help_text = (
        "üëã <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "üîπ <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "  - /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "  - /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "üîπ <b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>\n"
        "  - ‚úçÔ∏è –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (TXT/PDF) –∑–∞–¥–∞—á–∏\n"
        "  - üì∏ –†–µ—à–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π\n"
        "  - üìö –ö–æ–Ω—Å–ø–µ–∫—Ç ‚Äî –°–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —Ñ–∞–π–ª—É\n"
        "  - üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å ‚Äî –û—á–∏—Å—Ç–∏—Ç –ø–∞–º—è—Ç—å –ò–ò\n"
        "  - üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        f"–õ–∏–º–∏—Ç: {DEFAULT_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å ({PREMIUM_REQUEST_LIMIT} –¥–ª—è Premium). –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π!\n\n"
        "<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - @s1nay3</b>"
    )
    await message.answer(help_text, reply_markup=main_kb)

@dp.message(Command("admpanel"))
async def cmd_admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    update_user_stats(user_id, "text")
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb
    )

@dp.callback_query(F.data.startswith("btn_"))
async def callbacks_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    await callback.answer()
    if data == "btn_solve_text":
        if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
            await callback.message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
            return
        user_state[user_id] = "awaiting_text"
        await callback.message.reply(
            "‚úçÔ∏è –•–æ—Ä–æ—à–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (TXT/PDF) –∑–∞–¥–∞–Ω–∏—è. –ù–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
            reply_markup=cancel_kb)
    elif data == "btn_solve_photo":
        if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
            await callback.message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
            return
        user_state[user_id] = "awaiting_photo"
        await callback.message.reply("üì∏ –û—Ç–ª–∏—á–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è. –ù–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
                                    reply_markup=cancel_kb)
    elif data == "btn_consp–µ–∫—Ç":  # Fixed typo
        if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
            await callback.message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
            return
        user_state[user_id] = "awaiting_consp–µ–∫—Ç"
        await callback.message.reply(
            "üìö –•–æ—Ä–æ—à–æ ‚Äî –ø—Ä–∏—à–ª–∏ —Ç–µ–º—É, —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (TXT/PDF), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç.",
            reply_markup=cancel_kb)
    elif data == "btn_clear_memory":
        if user_id in user_memory:
            del user_memory[user_id]
        c.execute("DELETE FROM user_memory WHERE user_id=?", (user_id,))
        conn.commit()
        await callback.message.reply("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_kb)
    elif data == "btn_profile":
        user_data = user_stats.get(user_id, {})
        requests_left = get_requests_left(user_id)
        first_seen = user_data.get("first_seen", datetime.now().isoformat())
        status = "–ê–¥–º–∏–Ω" if user_id in ADMIN_IDS else ("Premium" if user_id in premium_users else "–û–±—ã—á–Ω—ã–π")
        requests_text = "‚àû (–∞–¥–º–∏–Ω)" if requests_left == float('inf') else f"{requests_left} (–∏–∑ {PREMIUM_REQUEST_LIMIT if user_id in premium_users else DEFAULT_REQUEST_LIMIT})"
        text = (
            f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n"
            f"üÜî ID: {user_id}\n"
            f"üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {datetime.fromisoformat(first_seen).strftime('%d.%m.%Y %H:%M')}\n"
            f"üëë –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìà –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_text}\n"
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('message_count', 0)}\n"
            f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {user_data.get('photo_count', 0)}\n"
            f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {user_data.get('document_count', 0)}"
        )
        await callback.message.edit_text(text, reply_markup=profile_kb)
    elif data == "btn_back_main":
        user_state[user_id] = None
        # Check if message content needs updating to avoid "message is not modified" error
        try:
            await callback.message.edit_text("üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_kb)
        except Exception as e:
            if "message is not modified" in str(e):
                pass  # Ignore if message content is the same
            else:
                logger.error(f"Error editing message: {e}")
    elif data == "btn_cancel":
        user_state[user_id] = None
        await callback.message.reply("‚ùå –û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.callback_query(F.data.startswith("admin_"))
async def admin_callbacks_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    data = callback.data
    await callback.answer()
    if data == "admin_back":
        await callback.message.edit_text(
            "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_main_kb
        )
    elif data == "admin_back_main":
        user_state[user_id] = None
        await callback.message.edit_text(
            "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=main_kb
        )
    elif data == "admin_stats":
        stats_text = get_user_stats_text()
        await callback.message.edit_text(
            stats_text,
            reply_markup=admin_back_kb
        )
    elif data == "admin_users":
        users_text = get_users_list()
        await callback.message.edit_text(
            users_text,
            reply_markup=admin_back_kb
        )
    elif data == "admin_activity":
        now = datetime.now()
        recent_users = []
        for uid, stats in user_stats.items():
            last_seen = datetime.fromisoformat(stats["last_seen"])
            if (now - last_seen).days < 1:
                recent_users.append((uid, last_seen, stats))
        recent_users.sort(key=lambda x: x[1], reverse=True)
        text = ["üïê <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>"]
        if not recent_users:
            text.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            for i, (uid, last_seen, stats) in enumerate(recent_users[:20], 1):
                time_str = last_seen.strftime("%d.%m.%Y %H:%M")
                text.append(f"{i}. ID: {uid} | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_str}")
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=admin_back_kb
        )
    elif data == "admin_user_memory":
        user_state[user_id] = "admin_view_memory"
        await callback.message.edit_text(
            "üîç <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=admin_back_kb
        )
    elif data == "admin_broadcast":
        user_state[user_id] = "admin_broadcast"
        await callback.message.edit_text(
            "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=admin_back_kb
        )
    elif data == "admin_add_premium":
        user_state[user_id] = "admin_add_premium"
        await callback.message.edit_text(
            "üíé <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Premium</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=admin_back_kb
        )
    elif data == "admin_remove_premium":
        user_state[user_id] = "admin_remove_premium"
        await callback.message.edit_text(
            "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ Premium</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=admin_back_kb
        )
    elif data == "admin_backup":
        try:
            # Ensure DB changes are committed before sending
            conn.commit()
            await bot.send_document(user_id, FSInputFile(DB_PATH), caption="–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö bot.db")
        except Exception as e:
            logger.error(f"Failed to send backup: {e}")
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞.", reply_markup=admin_back_kb)
    elif data == "admin_confirm_broadcast":
        if user_id in admin_broadcast_state:
            message_text = admin_broadcast_state[user_id]
            await callback.message.edit_text("üîÑ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>")
            result = await send_broadcast_message(message_text)
            admin_broadcast_state.pop(user_id, None)
            await callback.message.edit_text(result, reply_markup=admin_back_kb)
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=admin_back_kb
            )
    elif data == "admin_cancel_broadcast":
        admin_broadcast_state.pop(user_id, None)
        user_state[user_id] = None
        await callback.message.edit_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=admin_main_kb
        )

@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)
    user_text = message.text.strip()
    if not user_text:
        await message.reply("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞–Ω–∏–µ.")
        return
    if user_id in ADMIN_IDS and state == "admin_broadcast":
        admin_broadcast_state[user_id] = user_text
        user_state[user_id] = None
        await message.reply(
            f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{user_text}\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_stats)}\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:",
            reply_markup=admin_broadcast_kb
        )
        return
    elif user_id in ADMIN_IDS and state == "admin_view_memory":
        try:
            target_user_id = int(user_text)
            if target_user_id in user_memory:
                mem = user_memory[target_user_id]
                memory_text = f"üìö <b>–ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:</b>\n\n"
                for i, (q, a) in enumerate(reversed(mem), 1):
                    memory_text += f"<b>{i}.</b> –í–æ–ø—Ä–æ—Å: {q[:100]}...\n"
                    memory_text += f"–û—Ç–≤–µ—Ç: {a[:150]}...\n\n"
                await message.reply(memory_text, reply_markup=admin_back_kb)
            else:
                await message.reply("‚ùå –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_back_kb)
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=admin_back_kb)
        user_state[user_id] = None
        return
    elif user_id in ADMIN_IDS and state == "admin_add_premium":
        try:
            target_user_id = int(user_text)
            if target_user_id not in premium_users:
                premium_users.add(target_user_id)
                c.execute("INSERT OR IGNORE INTO premium_users (user_id) VALUES (?)", (target_user_id,))
                conn.commit()
                await message.reply(f"‚úÖ Premium –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.", reply_markup=admin_back_kb)
            else:
                await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç Premium.", reply_markup=admin_back_kb)
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=admin_back_kb)
        user_state[user_id] = None
        return
    elif user_id in ADMIN_IDS and state == "admin_remove_premium":
        try:
            target_user_id = int(user_text)
            if target_user_id in premium_users:
                premium_users.remove(target_user_id)
                c.execute("DELETE FROM premium_users WHERE user_id=?", (target_user_id,))
                conn.commit()
                await message.reply(f"‚úÖ Premium —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.", reply_markup=admin_back_kb)
            else:
                await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç Premium.", reply_markup=admin_back_kb)
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=admin_back_kb)
        user_state[user_id] = None
        return
    update_user_stats(user_id, "text")
    if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
        await message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
        return
    if state == "awaiting_consp–µ–∫—Ç":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç:\n\n{user_text}"
    else:
        prompt = f"–†–µ—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{user_text}"
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        answer = await call_openai_with_prompt(user_id, prompt, is_math=False)
        if user_id not in ADMIN_IDS:
            update_request_count(user_id)
    except Exception as err:
        logger.exception("OpenAI error")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI API: {err}")
        user_state[user_id] = None
        return
    save_memory(user_id, user_text, answer)
    user_state[user_id] = None
    await message.reply(answer, reply_markup=main_kb)

@dp.message(F.content_type == types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)
    update_user_stats(user_id, "photo")
    if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
        await message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
        return
    photo = message.photo[-1]
    try:
        file_info = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url, timeout=15)
            resp.raise_for_status()
            img_bytes = resp.content
    except Exception as e:
        logger.exception("Failed to download photo")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    try:
        ocr_text = await ocr_image_from_bytes(img_bytes)
    except Exception:
        logger.exception("OCR failed")
        ocr_text = ""
    if not ocr_text:
        await message.reply("ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π —Ñ–æ—Ç–æ –ø–æ–ª—É—á—à–µ –∏–ª–∏ –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
                           reply_markup=main_kb)
        user_state[user_id] = None
        return
    if state == "awaiting_consp–µ–∫—Ç":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç:\n\n{ocr_text}"
    else:
        prompt = f"–†–µ—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{ocr_text}"
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        answer = await call_openai_with_prompt(user_id, prompt, is_math=False)
        if user_id not in ADMIN_IDS:
            update_request_count(user_id)
    except Exception as err:
        logger.exception("OpenAI error on photo")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI API: {err}")
        user_state[user_id] = None
        return
    save_memory(user_id, ocr_text, answer)
    user_state[user_id] = None
    await message.reply(answer, reply_markup=main_kb)

@dp.message(F.content_type == types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)
    if state not in ["awaiting_text", "awaiting_consp–µ–∫—Ç"]:
        await message.reply("üìé –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–±–µ—Ä–∏ '–†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç' –∏–ª–∏ '–ö–æ–Ω—Å–ø–µ–∫—Ç'.")
        return
    update_user_stats(user_id, "document")
    if get_requests_left(user_id) <= 0 and user_id not in ADMIN_IDS:
        await message.reply(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({get_request_limit(user_id)} –≤ –¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=main_kb)
        return
    document = message.document
    file_name_lower = document.file_name.lower()
    if not file_name_lower.endswith(('.txt', '.pdf')):
        await message.reply("üìé –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF.")
        return
    try:
        file_info = await bot.get_file(document.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url, timeout=15)
            resp.raise_for_status()
            content = resp.content
    except Exception as e:
        logger.exception("Failed to download document")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    try:
        if file_name_lower.endswith('.txt'):
            extracted_text = content.decode('utf-8').strip()
        elif file_name_lower.endswith('.pdf'):
            with io.BytesIO(content) as pdf_bytes:
                with pdfplumber.open(pdf_bytes) as pdf:
                    extracted_text = '\n\n'.join(page.extract_text() or '' for page in pdf.pages).strip()
    except Exception as e:
        logger.exception("Text extraction failed")
        extracted_text = ""
    if not extracted_text:
        await message.reply("ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ PDF —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤—å –∫–∞–∫ —Ñ–æ—Ç–æ.")
        user_state[user_id] = None
        return
    if state == "awaiting_consp–µ–∫—Ç":
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç:\n\n{extracted_text}"
    else:
        prompt = f"–†–µ—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{extracted_text}"
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        answer = await call_openai_with_prompt(user_id, prompt, is_math=False)
        if user_id not in ADMIN_IDS:
            update_request_count(user_id)
    except Exception as err:
        logger.exception("OpenAI error on document")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        user_state[user_id] = None
        return
    save_memory(user_id, extracted_text, answer)
    user_state[user_id] = None
    await message.reply(answer, reply_markup=main_kb)

async def main():
    logger.info("Bot is starting...")
    load_data()
    while True:
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
        except Exception as e:
            logger.error(f"Polling failed: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Shutting down")
        conn.close()
